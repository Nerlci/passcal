
// Generated from src/PascalS.g4 by ANTLR 4.13.2


#include "PascalSLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PascalSLexerStaticData final {
  PascalSLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PascalSLexerStaticData(const PascalSLexerStaticData&) = delete;
  PascalSLexerStaticData(PascalSLexerStaticData&&) = delete;
  PascalSLexerStaticData& operator=(const PascalSLexerStaticData&) = delete;
  PascalSLexerStaticData& operator=(PascalSLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag pascalslexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<PascalSLexerStaticData> pascalslexerLexerStaticData = nullptr;

void pascalslexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (pascalslexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(pascalslexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<PascalSLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "RELOP", "EQUAL", "ADDOP", "MULOP", "PLUS", "MINUS", "MULT", 
      "DIVIDE", "ASSIGNOP", "AND", "OR", "NOT", "INTEGER", "REAL", "BOOLEAN", 
      "CHAR", "ARRAY", "BEGIN", "CASE", "CONST", "DIV", "DO", "DOWNTO", 
      "ELSE", "END", "FOR", "FUNCTION", "IF", "MOD", "OF", "PROCEDURE", 
      "PROGRAM", "RECORD", "REPEAT", "THEN", "TO", "TYPE", "UNTIL", "VAR", 
      "WHILE", "ID", "LETTER", "NUM", "EXPONENT", "FRAC", "DIGITS", "DIGIT", 
      "NEWLINE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'.'", "'('", "')'", "';'", "','", "'''", "'['", "']'", "'..'", 
      "':'", "", "'='", "", "", "'+'", "'-'", "'*'", "'/'", "':='", "'and'", 
      "'or'", "'not'", "'integer'", "'real'", "'boolean'", "'char'", "'array'", 
      "'begin'", "'case'", "'const'", "'div'", "'do'", "'downto'", "'else'", 
      "'end'", "'for'", "'function'", "'if'", "'mod'", "'of'", "'procedure'", 
      "'program'", "'record'", "'repeat'", "'then'", "'to'", "'type'", "'until'", 
      "'var'", "'while'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "RELOP", "EQUAL", "ADDOP", 
      "MULOP", "PLUS", "MINUS", "MULT", "DIVIDE", "ASSIGNOP", "AND", "OR", 
      "NOT", "INTEGER", "REAL", "BOOLEAN", "CHAR", "ARRAY", "BEGIN", "CASE", 
      "CONST", "DIV", "DO", "DOWNTO", "ELSE", "END", "FOR", "FUNCTION", 
      "IF", "MOD", "OF", "PROCEDURE", "PROGRAM", "RECORD", "REPEAT", "THEN", 
      "TO", "TYPE", "UNTIL", "VAR", "WHILE", "ID", "LETTER", "NUM", "EXPONENT", 
      "FRAC", "DIGITS", "DIGIT", "NEWLINE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,59,392,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,
  	1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
  	1,10,1,10,1,10,3,10,150,8,10,1,11,1,11,1,12,1,12,1,12,3,12,157,8,12,1,
  	13,1,13,1,13,1,13,1,13,3,13,164,8,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
  	17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,
  	21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
  	23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
  	26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,
  	28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,
  	31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,
  	34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,
  	36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,
  	40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,
  	41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,
  	43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,
  	46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,49,1,49,1,
  	49,1,49,1,49,1,49,1,50,1,50,1,50,5,50,347,8,50,10,50,12,50,350,9,50,1,
  	51,1,51,1,52,1,52,3,52,356,8,52,1,52,3,52,359,8,52,1,53,1,53,3,53,363,
  	8,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,5,55,372,8,55,10,55,12,55,375,
  	9,55,1,56,1,56,1,57,3,57,380,8,57,1,57,1,57,1,57,1,57,1,58,4,58,387,8,
  	58,11,58,12,58,388,1,58,1,58,0,0,59,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
  	8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
  	20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
  	63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
  	43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,
  	54,109,55,111,56,113,57,115,58,117,59,1,0,4,2,0,65,90,97,122,2,0,43,43,
  	45,45,1,0,48,57,2,0,9,9,32,32,410,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
  	0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
  	0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
  	0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,
  	39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
  	0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
  	0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,
  	71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
  	0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
  	0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
  	103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
  	113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,
  	123,1,0,0,0,7,125,1,0,0,0,9,127,1,0,0,0,11,129,1,0,0,0,13,131,1,0,0,0,
  	15,133,1,0,0,0,17,135,1,0,0,0,19,138,1,0,0,0,21,149,1,0,0,0,23,151,1,
  	0,0,0,25,156,1,0,0,0,27,163,1,0,0,0,29,165,1,0,0,0,31,167,1,0,0,0,33,
  	169,1,0,0,0,35,171,1,0,0,0,37,173,1,0,0,0,39,176,1,0,0,0,41,180,1,0,0,
  	0,43,183,1,0,0,0,45,187,1,0,0,0,47,195,1,0,0,0,49,200,1,0,0,0,51,208,
  	1,0,0,0,53,213,1,0,0,0,55,219,1,0,0,0,57,225,1,0,0,0,59,230,1,0,0,0,61,
  	236,1,0,0,0,63,240,1,0,0,0,65,243,1,0,0,0,67,250,1,0,0,0,69,255,1,0,0,
  	0,71,259,1,0,0,0,73,263,1,0,0,0,75,272,1,0,0,0,77,275,1,0,0,0,79,279,
  	1,0,0,0,81,282,1,0,0,0,83,292,1,0,0,0,85,300,1,0,0,0,87,307,1,0,0,0,89,
  	314,1,0,0,0,91,319,1,0,0,0,93,322,1,0,0,0,95,327,1,0,0,0,97,333,1,0,0,
  	0,99,337,1,0,0,0,101,343,1,0,0,0,103,351,1,0,0,0,105,353,1,0,0,0,107,
  	360,1,0,0,0,109,366,1,0,0,0,111,369,1,0,0,0,113,376,1,0,0,0,115,379,1,
  	0,0,0,117,386,1,0,0,0,119,120,5,46,0,0,120,2,1,0,0,0,121,122,5,40,0,0,
  	122,4,1,0,0,0,123,124,5,41,0,0,124,6,1,0,0,0,125,126,5,59,0,0,126,8,1,
  	0,0,0,127,128,5,44,0,0,128,10,1,0,0,0,129,130,5,39,0,0,130,12,1,0,0,0,
  	131,132,5,91,0,0,132,14,1,0,0,0,133,134,5,93,0,0,134,16,1,0,0,0,135,136,
  	5,46,0,0,136,137,5,46,0,0,137,18,1,0,0,0,138,139,5,58,0,0,139,20,1,0,
  	0,0,140,150,3,23,11,0,141,142,5,60,0,0,142,150,5,62,0,0,143,150,5,60,
  	0,0,144,145,5,60,0,0,145,150,5,61,0,0,146,150,5,62,0,0,147,148,5,62,0,
  	0,148,150,5,61,0,0,149,140,1,0,0,0,149,141,1,0,0,0,149,143,1,0,0,0,149,
  	144,1,0,0,0,149,146,1,0,0,0,149,147,1,0,0,0,150,22,1,0,0,0,151,152,5,
  	61,0,0,152,24,1,0,0,0,153,157,3,29,14,0,154,157,3,31,15,0,155,157,3,41,
  	20,0,156,153,1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,26,1,0,0,0,158,
  	164,3,33,16,0,159,164,3,35,17,0,160,164,3,61,30,0,161,164,3,77,38,0,162,
  	164,3,39,19,0,163,158,1,0,0,0,163,159,1,0,0,0,163,160,1,0,0,0,163,161,
  	1,0,0,0,163,162,1,0,0,0,164,28,1,0,0,0,165,166,5,43,0,0,166,30,1,0,0,
  	0,167,168,5,45,0,0,168,32,1,0,0,0,169,170,5,42,0,0,170,34,1,0,0,0,171,
  	172,5,47,0,0,172,36,1,0,0,0,173,174,5,58,0,0,174,175,5,61,0,0,175,38,
  	1,0,0,0,176,177,5,97,0,0,177,178,5,110,0,0,178,179,5,100,0,0,179,40,1,
  	0,0,0,180,181,5,111,0,0,181,182,5,114,0,0,182,42,1,0,0,0,183,184,5,110,
  	0,0,184,185,5,111,0,0,185,186,5,116,0,0,186,44,1,0,0,0,187,188,5,105,
  	0,0,188,189,5,110,0,0,189,190,5,116,0,0,190,191,5,101,0,0,191,192,5,103,
  	0,0,192,193,5,101,0,0,193,194,5,114,0,0,194,46,1,0,0,0,195,196,5,114,
  	0,0,196,197,5,101,0,0,197,198,5,97,0,0,198,199,5,108,0,0,199,48,1,0,0,
  	0,200,201,5,98,0,0,201,202,5,111,0,0,202,203,5,111,0,0,203,204,5,108,
  	0,0,204,205,5,101,0,0,205,206,5,97,0,0,206,207,5,110,0,0,207,50,1,0,0,
  	0,208,209,5,99,0,0,209,210,5,104,0,0,210,211,5,97,0,0,211,212,5,114,0,
  	0,212,52,1,0,0,0,213,214,5,97,0,0,214,215,5,114,0,0,215,216,5,114,0,0,
  	216,217,5,97,0,0,217,218,5,121,0,0,218,54,1,0,0,0,219,220,5,98,0,0,220,
  	221,5,101,0,0,221,222,5,103,0,0,222,223,5,105,0,0,223,224,5,110,0,0,224,
  	56,1,0,0,0,225,226,5,99,0,0,226,227,5,97,0,0,227,228,5,115,0,0,228,229,
  	5,101,0,0,229,58,1,0,0,0,230,231,5,99,0,0,231,232,5,111,0,0,232,233,5,
  	110,0,0,233,234,5,115,0,0,234,235,5,116,0,0,235,60,1,0,0,0,236,237,5,
  	100,0,0,237,238,5,105,0,0,238,239,5,118,0,0,239,62,1,0,0,0,240,241,5,
  	100,0,0,241,242,5,111,0,0,242,64,1,0,0,0,243,244,5,100,0,0,244,245,5,
  	111,0,0,245,246,5,119,0,0,246,247,5,110,0,0,247,248,5,116,0,0,248,249,
  	5,111,0,0,249,66,1,0,0,0,250,251,5,101,0,0,251,252,5,108,0,0,252,253,
  	5,115,0,0,253,254,5,101,0,0,254,68,1,0,0,0,255,256,5,101,0,0,256,257,
  	5,110,0,0,257,258,5,100,0,0,258,70,1,0,0,0,259,260,5,102,0,0,260,261,
  	5,111,0,0,261,262,5,114,0,0,262,72,1,0,0,0,263,264,5,102,0,0,264,265,
  	5,117,0,0,265,266,5,110,0,0,266,267,5,99,0,0,267,268,5,116,0,0,268,269,
  	5,105,0,0,269,270,5,111,0,0,270,271,5,110,0,0,271,74,1,0,0,0,272,273,
  	5,105,0,0,273,274,5,102,0,0,274,76,1,0,0,0,275,276,5,109,0,0,276,277,
  	5,111,0,0,277,278,5,100,0,0,278,78,1,0,0,0,279,280,5,111,0,0,280,281,
  	5,102,0,0,281,80,1,0,0,0,282,283,5,112,0,0,283,284,5,114,0,0,284,285,
  	5,111,0,0,285,286,5,99,0,0,286,287,5,101,0,0,287,288,5,100,0,0,288,289,
  	5,117,0,0,289,290,5,114,0,0,290,291,5,101,0,0,291,82,1,0,0,0,292,293,
  	5,112,0,0,293,294,5,114,0,0,294,295,5,111,0,0,295,296,5,103,0,0,296,297,
  	5,114,0,0,297,298,5,97,0,0,298,299,5,109,0,0,299,84,1,0,0,0,300,301,5,
  	114,0,0,301,302,5,101,0,0,302,303,5,99,0,0,303,304,5,111,0,0,304,305,
  	5,114,0,0,305,306,5,100,0,0,306,86,1,0,0,0,307,308,5,114,0,0,308,309,
  	5,101,0,0,309,310,5,112,0,0,310,311,5,101,0,0,311,312,5,97,0,0,312,313,
  	5,116,0,0,313,88,1,0,0,0,314,315,5,116,0,0,315,316,5,104,0,0,316,317,
  	5,101,0,0,317,318,5,110,0,0,318,90,1,0,0,0,319,320,5,116,0,0,320,321,
  	5,111,0,0,321,92,1,0,0,0,322,323,5,116,0,0,323,324,5,121,0,0,324,325,
  	5,112,0,0,325,326,5,101,0,0,326,94,1,0,0,0,327,328,5,117,0,0,328,329,
  	5,110,0,0,329,330,5,116,0,0,330,331,5,105,0,0,331,332,5,108,0,0,332,96,
  	1,0,0,0,333,334,5,118,0,0,334,335,5,97,0,0,335,336,5,114,0,0,336,98,1,
  	0,0,0,337,338,5,119,0,0,338,339,5,104,0,0,339,340,5,105,0,0,340,341,5,
  	108,0,0,341,342,5,101,0,0,342,100,1,0,0,0,343,348,3,103,51,0,344,347,
  	3,103,51,0,345,347,3,113,56,0,346,344,1,0,0,0,346,345,1,0,0,0,347,350,
  	1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,102,1,0,0,0,350,348,1,0,0,
  	0,351,352,7,0,0,0,352,104,1,0,0,0,353,355,3,111,55,0,354,356,3,109,54,
  	0,355,354,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,359,3,107,53,0,
  	358,357,1,0,0,0,358,359,1,0,0,0,359,106,1,0,0,0,360,362,5,69,0,0,361,
  	363,7,1,0,0,362,361,1,0,0,0,362,363,1,0,0,0,363,364,1,0,0,0,364,365,3,
  	111,55,0,365,108,1,0,0,0,366,367,5,46,0,0,367,368,3,111,55,0,368,110,
  	1,0,0,0,369,373,3,113,56,0,370,372,3,113,56,0,371,370,1,0,0,0,372,375,
  	1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,0,374,112,1,0,0,0,375,373,1,0,0,
  	0,376,377,7,2,0,0,377,114,1,0,0,0,378,380,5,13,0,0,379,378,1,0,0,0,379,
  	380,1,0,0,0,380,381,1,0,0,0,381,382,5,10,0,0,382,383,1,0,0,0,383,384,
  	6,57,0,0,384,116,1,0,0,0,385,387,7,3,0,0,386,385,1,0,0,0,387,388,1,0,
  	0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,390,391,6,58,0,0,
  	391,118,1,0,0,0,12,0,149,156,163,346,348,355,358,362,373,379,388,1,6,
  	0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  pascalslexerLexerStaticData = std::move(staticData);
}

}

PascalSLexer::PascalSLexer(CharStream *input) : Lexer(input) {
  PascalSLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *pascalslexerLexerStaticData->atn, pascalslexerLexerStaticData->decisionToDFA, pascalslexerLexerStaticData->sharedContextCache);
}

PascalSLexer::~PascalSLexer() {
  delete _interpreter;
}

std::string PascalSLexer::getGrammarFileName() const {
  return "PascalS.g4";
}

const std::vector<std::string>& PascalSLexer::getRuleNames() const {
  return pascalslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PascalSLexer::getChannelNames() const {
  return pascalslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PascalSLexer::getModeNames() const {
  return pascalslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PascalSLexer::getVocabulary() const {
  return pascalslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PascalSLexer::getSerializedATN() const {
  return pascalslexerLexerStaticData->serializedATN;
}

const atn::ATN& PascalSLexer::getATN() const {
  return *pascalslexerLexerStaticData->atn;
}




void PascalSLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  pascalslexerLexerInitialize();
#else
  ::antlr4::internal::call_once(pascalslexerLexerOnceFlag, pascalslexerLexerInitialize);
#endif
}
