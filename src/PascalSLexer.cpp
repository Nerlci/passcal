
// Generated from src/PascalS.g4 by ANTLR 4.13.2


#include "PascalSLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PascalSLexerStaticData final {
  PascalSLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PascalSLexerStaticData(const PascalSLexerStaticData&) = delete;
  PascalSLexerStaticData(PascalSLexerStaticData&&) = delete;
  PascalSLexerStaticData& operator=(const PascalSLexerStaticData&) = delete;
  PascalSLexerStaticData& operator=(PascalSLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag pascalslexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<PascalSLexerStaticData> pascalslexerLexerStaticData = nullptr;

void pascalslexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (pascalslexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(pascalslexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<PascalSLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "AND", "OR", "NOT", "INTEGER", 
      "REAL", "BOOLEAN", "CHAR", "ARRAY", "BEGIN", "CASE", "CONST", "DIV", 
      "DO", "DOWNTO", "ELSE", "END", "FALSE", "FOR", "FUNCTION", "IF", "MOD", 
      "OF", "PROCEDURE", "PROGRAM", "RECORD", "REPEAT", "THEN", "TO", "TRUE", 
      "TYPE", "UNTIL", "VAR", "WHILE", "CHARLITERAL", "ID", "LETTER", "NUM", 
      "EXPONENT", "FRAC", "DIGITS", "DIGIT", "EQUAL", "PLUS", "MINUS", "MULT", 
      "DIVIDE", "ASSIGNOP", "PERIODOP", "DOT", "COMMA", "COLON", "SEMICOLON", 
      "QUOTE", "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "NEWLINE", "WS"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'<>'", "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", 
      "'integer'", "'real'", "'boolean'", "'char'", "'array'", "'begin'", 
      "'case'", "'const'", "'div'", "'do'", "'downto'", "'else'", "'end'", 
      "'false'", "'for'", "'function'", "'if'", "'mod'", "'of'", "'procedure'", 
      "'program'", "'record'", "'repeat'", "'then'", "'to'", "'true'", "'type'", 
      "'until'", "'var'", "'while'", "", "", "", "", "", "", "", "", "'='", 
      "'+'", "'-'", "'*'", "'/'", "':='", "'..'", "'.'", "','", "':'", "';'", 
      "'''", "'('", "')'", "'['", "']'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "AND", "OR", "NOT", "INTEGER", "REAL", "BOOLEAN", 
      "CHAR", "ARRAY", "BEGIN", "CASE", "CONST", "DIV", "DO", "DOWNTO", 
      "ELSE", "END", "FALSE", "FOR", "FUNCTION", "IF", "MOD", "OF", "PROCEDURE", 
      "PROGRAM", "RECORD", "REPEAT", "THEN", "TO", "TRUE", "TYPE", "UNTIL", 
      "VAR", "WHILE", "CHARLITERAL", "ID", "LETTER", "NUM", "EXPONENT", 
      "FRAC", "DIGITS", "DIGIT", "EQUAL", "PLUS", "MINUS", "MULT", "DIVIDE", 
      "ASSIGNOP", "PERIODOP", "DOT", "COMMA", "COLON", "SEMICOLON", "QUOTE", 
      "LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "NEWLINE", "WS"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,64,410,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,
  	1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,
  	9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
  	1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
  	1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
  	1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,
  	1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
  	1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
  	1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
  	1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,
  	1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,38,1,38,1,38,3,38,324,8,38,1,38,1,38,1,39,1,39,1,39,
  	5,39,331,8,39,10,39,12,39,334,9,39,1,40,1,40,1,41,1,41,3,41,340,8,41,
  	1,41,3,41,343,8,41,1,42,1,42,3,42,347,8,42,1,42,1,42,1,43,1,43,1,43,1,
  	44,1,44,5,44,356,8,44,10,44,12,44,359,9,44,1,45,1,45,1,46,1,46,1,47,1,
  	47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,
  	53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,
  	60,1,61,1,61,1,62,3,62,398,8,62,1,62,1,62,1,62,1,62,1,63,4,63,405,8,63,
  	11,63,12,63,406,1,63,1,63,0,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
  	9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
  	21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
  	65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
  	44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
  	55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,63,127,64,1,0,
  	4,2,0,65,90,97,122,2,0,43,43,45,45,1,0,48,57,2,0,9,9,32,32,418,0,1,1,
  	0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
  	13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
  	0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
  	0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
  	45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
  	0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
  	0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,
  	77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
  	0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
  	0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
  	0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,
  	0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,
  	0,1,129,1,0,0,0,3,132,1,0,0,0,5,134,1,0,0,0,7,137,1,0,0,0,9,139,1,0,0,
  	0,11,142,1,0,0,0,13,146,1,0,0,0,15,149,1,0,0,0,17,153,1,0,0,0,19,161,
  	1,0,0,0,21,166,1,0,0,0,23,174,1,0,0,0,25,179,1,0,0,0,27,185,1,0,0,0,29,
  	191,1,0,0,0,31,196,1,0,0,0,33,202,1,0,0,0,35,206,1,0,0,0,37,209,1,0,0,
  	0,39,216,1,0,0,0,41,221,1,0,0,0,43,225,1,0,0,0,45,231,1,0,0,0,47,235,
  	1,0,0,0,49,244,1,0,0,0,51,247,1,0,0,0,53,251,1,0,0,0,55,254,1,0,0,0,57,
  	264,1,0,0,0,59,272,1,0,0,0,61,279,1,0,0,0,63,286,1,0,0,0,65,291,1,0,0,
  	0,67,294,1,0,0,0,69,299,1,0,0,0,71,304,1,0,0,0,73,310,1,0,0,0,75,314,
  	1,0,0,0,77,320,1,0,0,0,79,327,1,0,0,0,81,335,1,0,0,0,83,337,1,0,0,0,85,
  	344,1,0,0,0,87,350,1,0,0,0,89,353,1,0,0,0,91,360,1,0,0,0,93,362,1,0,0,
  	0,95,364,1,0,0,0,97,366,1,0,0,0,99,368,1,0,0,0,101,370,1,0,0,0,103,372,
  	1,0,0,0,105,375,1,0,0,0,107,378,1,0,0,0,109,380,1,0,0,0,111,382,1,0,0,
  	0,113,384,1,0,0,0,115,386,1,0,0,0,117,388,1,0,0,0,119,390,1,0,0,0,121,
  	392,1,0,0,0,123,394,1,0,0,0,125,397,1,0,0,0,127,404,1,0,0,0,129,130,5,
  	60,0,0,130,131,5,62,0,0,131,2,1,0,0,0,132,133,5,60,0,0,133,4,1,0,0,0,
  	134,135,5,60,0,0,135,136,5,61,0,0,136,6,1,0,0,0,137,138,5,62,0,0,138,
  	8,1,0,0,0,139,140,5,62,0,0,140,141,5,61,0,0,141,10,1,0,0,0,142,143,5,
  	97,0,0,143,144,5,110,0,0,144,145,5,100,0,0,145,12,1,0,0,0,146,147,5,111,
  	0,0,147,148,5,114,0,0,148,14,1,0,0,0,149,150,5,110,0,0,150,151,5,111,
  	0,0,151,152,5,116,0,0,152,16,1,0,0,0,153,154,5,105,0,0,154,155,5,110,
  	0,0,155,156,5,116,0,0,156,157,5,101,0,0,157,158,5,103,0,0,158,159,5,101,
  	0,0,159,160,5,114,0,0,160,18,1,0,0,0,161,162,5,114,0,0,162,163,5,101,
  	0,0,163,164,5,97,0,0,164,165,5,108,0,0,165,20,1,0,0,0,166,167,5,98,0,
  	0,167,168,5,111,0,0,168,169,5,111,0,0,169,170,5,108,0,0,170,171,5,101,
  	0,0,171,172,5,97,0,0,172,173,5,110,0,0,173,22,1,0,0,0,174,175,5,99,0,
  	0,175,176,5,104,0,0,176,177,5,97,0,0,177,178,5,114,0,0,178,24,1,0,0,0,
  	179,180,5,97,0,0,180,181,5,114,0,0,181,182,5,114,0,0,182,183,5,97,0,0,
  	183,184,5,121,0,0,184,26,1,0,0,0,185,186,5,98,0,0,186,187,5,101,0,0,187,
  	188,5,103,0,0,188,189,5,105,0,0,189,190,5,110,0,0,190,28,1,0,0,0,191,
  	192,5,99,0,0,192,193,5,97,0,0,193,194,5,115,0,0,194,195,5,101,0,0,195,
  	30,1,0,0,0,196,197,5,99,0,0,197,198,5,111,0,0,198,199,5,110,0,0,199,200,
  	5,115,0,0,200,201,5,116,0,0,201,32,1,0,0,0,202,203,5,100,0,0,203,204,
  	5,105,0,0,204,205,5,118,0,0,205,34,1,0,0,0,206,207,5,100,0,0,207,208,
  	5,111,0,0,208,36,1,0,0,0,209,210,5,100,0,0,210,211,5,111,0,0,211,212,
  	5,119,0,0,212,213,5,110,0,0,213,214,5,116,0,0,214,215,5,111,0,0,215,38,
  	1,0,0,0,216,217,5,101,0,0,217,218,5,108,0,0,218,219,5,115,0,0,219,220,
  	5,101,0,0,220,40,1,0,0,0,221,222,5,101,0,0,222,223,5,110,0,0,223,224,
  	5,100,0,0,224,42,1,0,0,0,225,226,5,102,0,0,226,227,5,97,0,0,227,228,5,
  	108,0,0,228,229,5,115,0,0,229,230,5,101,0,0,230,44,1,0,0,0,231,232,5,
  	102,0,0,232,233,5,111,0,0,233,234,5,114,0,0,234,46,1,0,0,0,235,236,5,
  	102,0,0,236,237,5,117,0,0,237,238,5,110,0,0,238,239,5,99,0,0,239,240,
  	5,116,0,0,240,241,5,105,0,0,241,242,5,111,0,0,242,243,5,110,0,0,243,48,
  	1,0,0,0,244,245,5,105,0,0,245,246,5,102,0,0,246,50,1,0,0,0,247,248,5,
  	109,0,0,248,249,5,111,0,0,249,250,5,100,0,0,250,52,1,0,0,0,251,252,5,
  	111,0,0,252,253,5,102,0,0,253,54,1,0,0,0,254,255,5,112,0,0,255,256,5,
  	114,0,0,256,257,5,111,0,0,257,258,5,99,0,0,258,259,5,101,0,0,259,260,
  	5,100,0,0,260,261,5,117,0,0,261,262,5,114,0,0,262,263,5,101,0,0,263,56,
  	1,0,0,0,264,265,5,112,0,0,265,266,5,114,0,0,266,267,5,111,0,0,267,268,
  	5,103,0,0,268,269,5,114,0,0,269,270,5,97,0,0,270,271,5,109,0,0,271,58,
  	1,0,0,0,272,273,5,114,0,0,273,274,5,101,0,0,274,275,5,99,0,0,275,276,
  	5,111,0,0,276,277,5,114,0,0,277,278,5,100,0,0,278,60,1,0,0,0,279,280,
  	5,114,0,0,280,281,5,101,0,0,281,282,5,112,0,0,282,283,5,101,0,0,283,284,
  	5,97,0,0,284,285,5,116,0,0,285,62,1,0,0,0,286,287,5,116,0,0,287,288,5,
  	104,0,0,288,289,5,101,0,0,289,290,5,110,0,0,290,64,1,0,0,0,291,292,5,
  	116,0,0,292,293,5,111,0,0,293,66,1,0,0,0,294,295,5,116,0,0,295,296,5,
  	114,0,0,296,297,5,117,0,0,297,298,5,101,0,0,298,68,1,0,0,0,299,300,5,
  	116,0,0,300,301,5,121,0,0,301,302,5,112,0,0,302,303,5,101,0,0,303,70,
  	1,0,0,0,304,305,5,117,0,0,305,306,5,110,0,0,306,307,5,116,0,0,307,308,
  	5,105,0,0,308,309,5,108,0,0,309,72,1,0,0,0,310,311,5,118,0,0,311,312,
  	5,97,0,0,312,313,5,114,0,0,313,74,1,0,0,0,314,315,5,119,0,0,315,316,5,
  	104,0,0,316,317,5,105,0,0,317,318,5,108,0,0,318,319,5,101,0,0,319,76,
  	1,0,0,0,320,323,3,115,57,0,321,324,3,81,40,0,322,324,3,91,45,0,323,321,
  	1,0,0,0,323,322,1,0,0,0,324,325,1,0,0,0,325,326,3,115,57,0,326,78,1,0,
  	0,0,327,332,3,81,40,0,328,331,3,81,40,0,329,331,3,91,45,0,330,328,1,0,
  	0,0,330,329,1,0,0,0,331,334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,
  	80,1,0,0,0,334,332,1,0,0,0,335,336,7,0,0,0,336,82,1,0,0,0,337,339,3,89,
  	44,0,338,340,3,87,43,0,339,338,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,
  	0,341,343,3,85,42,0,342,341,1,0,0,0,342,343,1,0,0,0,343,84,1,0,0,0,344,
  	346,5,69,0,0,345,347,7,1,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,348,
  	1,0,0,0,348,349,3,89,44,0,349,86,1,0,0,0,350,351,5,46,0,0,351,352,3,89,
  	44,0,352,88,1,0,0,0,353,357,3,91,45,0,354,356,3,91,45,0,355,354,1,0,0,
  	0,356,359,1,0,0,0,357,355,1,0,0,0,357,358,1,0,0,0,358,90,1,0,0,0,359,
  	357,1,0,0,0,360,361,7,2,0,0,361,92,1,0,0,0,362,363,5,61,0,0,363,94,1,
  	0,0,0,364,365,5,43,0,0,365,96,1,0,0,0,366,367,5,45,0,0,367,98,1,0,0,0,
  	368,369,5,42,0,0,369,100,1,0,0,0,370,371,5,47,0,0,371,102,1,0,0,0,372,
  	373,5,58,0,0,373,374,5,61,0,0,374,104,1,0,0,0,375,376,5,46,0,0,376,377,
  	5,46,0,0,377,106,1,0,0,0,378,379,5,46,0,0,379,108,1,0,0,0,380,381,5,44,
  	0,0,381,110,1,0,0,0,382,383,5,58,0,0,383,112,1,0,0,0,384,385,5,59,0,0,
  	385,114,1,0,0,0,386,387,5,39,0,0,387,116,1,0,0,0,388,389,5,40,0,0,389,
  	118,1,0,0,0,390,391,5,41,0,0,391,120,1,0,0,0,392,393,5,91,0,0,393,122,
  	1,0,0,0,394,395,5,93,0,0,395,124,1,0,0,0,396,398,5,13,0,0,397,396,1,0,
  	0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,10,0,0,400,401,1,0,0,0,
  	401,402,6,62,0,0,402,126,1,0,0,0,403,405,7,3,0,0,404,403,1,0,0,0,405,
  	406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,409,6,
  	63,0,0,409,128,1,0,0,0,10,0,323,330,332,339,342,346,357,397,406,1,6,0,
  	0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  pascalslexerLexerStaticData = std::move(staticData);
}

}

PascalSLexer::PascalSLexer(CharStream *input) : Lexer(input) {
  PascalSLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *pascalslexerLexerStaticData->atn, pascalslexerLexerStaticData->decisionToDFA, pascalslexerLexerStaticData->sharedContextCache);
}

PascalSLexer::~PascalSLexer() {
  delete _interpreter;
}

std::string PascalSLexer::getGrammarFileName() const {
  return "PascalS.g4";
}

const std::vector<std::string>& PascalSLexer::getRuleNames() const {
  return pascalslexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PascalSLexer::getChannelNames() const {
  return pascalslexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PascalSLexer::getModeNames() const {
  return pascalslexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PascalSLexer::getVocabulary() const {
  return pascalslexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PascalSLexer::getSerializedATN() const {
  return pascalslexerLexerStaticData->serializedATN;
}

const atn::ATN& PascalSLexer::getATN() const {
  return *pascalslexerLexerStaticData->atn;
}




void PascalSLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  pascalslexerLexerInitialize();
#else
  ::antlr4::internal::call_once(pascalslexerLexerOnceFlag, pascalslexerLexerInitialize);
#endif
}
